{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-awesome-uploader/lib/file-picker.service.ts","ng://ngx-awesome-uploader/lib/file-upload.utils.ts","ng://ngx-awesome-uploader/lib/validation-error.model.ts","ng://ngx-awesome-uploader/lib/file-picker.adapter.ts","ng://ngx-awesome-uploader/lib/default-captions.ts","ng://ngx-awesome-uploader/lib/file-picker.component.ts","ng://ngx-awesome-uploader/lib/icons/close-icon/close-icon.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/file-preview-item.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-container.component.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-file.model.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-event.model.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.component.ts","ng://ngx-awesome-uploader/lib/icons/cloud-icon/cloud-icon.component.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.module.ts","ng://ngx-awesome-uploader/lib/file-preview-container/preview-lightbox/preview-lightbox.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/refresh-icon/refresh-icon.component.ts","ng://ngx-awesome-uploader/lib/file-picker.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FilePickerService","sanitizer","mockUploadFile","formData","event","CustomEvent","detail","type","of","createSafeUrl","file","UPLOADER_TEST_MODE","url","window","URL","createObjectURL","bypassSecurityTrustResourceUrl","er","console","log","Injectable","DomSanitizer","getFileType","fileExtension","includes","fileMaxSize","fileMaxCount","totalMaxSize","extensions","uploadType","customValidator","DefaultCaptions","dropzone","title","or","browse","cropper","crop","cancel","previewCard","remove","uploadError","FilePickerComponent","fileService","elementRef","uploadSuccess","EventEmitter","uploadFail","removeSuccess","validationError","fileAdded","enableCropper","showeDragDropZone","showPreviewContainer","files","filesForCropper","cropClosed$","Subject","_onDestroy$","ngOnInit","setCropperOptions","listenToCropClose","setCaptions","ngOnDestroy","_captions","captions","_this","pipe","takeUntil","subscribe","res","croppedIndex","findIndex","item","name","fileName","nextFile","undefined","tslib_1.__spread","filter","openCropper","cropperOptions","setDefaultCropperOptions","dragMode","aspectRatio","autoCrop","movable","zoomable","scalable","autoCropArea","onChange","fileInput","Array","from","handleFiles","isValidMaxFileCount","isValidUploadSync","every","validateFileSync","asyncFunctions","map","validateFileAsync","combineLatest","isValidUploadAsync","result","forEach","index","handleInputFile","isValidUploadType","isValidExtension","tap","FileValidationTypes","currentCropperFile","isValidSize","size","pushFile","dropped","filesForUpload","_b","tslib_1.__values","_c","droppedFile","fileEntry","isFile","setTimeout","Cropper","safeCropImgUrl","warn","getSafeUrl","cropperImgLoaded","image","document","getElementById","closeCropper","filePreview","removeFileFromList","f","onUploadSuccess","fileItem","onUploadFail","fileExtensions","extension","split","pop","ext","toLowerCase","indexOf","isValidFileSize","isValidTotalFileSize","bitsToMb","toString","totalBits","reduce","acc","curr","parseFloat","onCropSubmit","getCroppedCanvas","toBlob","blobFallBack","bind","blob","removeFile","adapter","onRemoveSuccess","Component","args","selector","template","ElementRef","Output","Input","CloseIconComponent","FilePreviewItemComponent","imageClicked","icon","uploadFile","fileType","safeUrl","niceBytes","x","l","parseInt","toFixed","onRetry","onCheckMarkClick","uploadSubscription","uploadProgress","id","fileId","handleProgressResponse","HttpEventType","Sent","UploadProgress","Math","round","loaded","total","Response","body","data","onRemove","uploadUnsubscribe","unsubscribe","FilePreviewContainerComponent","openLightbox","lightboxFile","closeLightbox","relativePath","UploadEvent","FileComponent","zone","renderer","customstyle","disableIf","onFileDrop","onFileOver","onFileLeave","stack","dragoverflag","globalDisable","numOfActiveReadEntries","globalStart","listen","evt","globalEnd","onDragOver","emit","preventAndStop","onDragLeave","dropFiles","length_1","dataTransfer","dropEffect","items","entry","webkitGetAsEntry","toUpload","UploadFile","this_1","addToQueue","isDirectory","traverseFileTree","file_1","fakeFileEntry","callback","timerObservable","timer","subscription","path","run","popToStack","pushToStack","dirReader_1","createReader","entries_1","thisObj_1","readEntries_1","readEntries","toUpload_1","str","clearQueue","stopPropagation","preventDefault","NgZone","Renderer2","CloudIconComponent","FileDropModule","NgModule","declarations","exports","imports","CommonModule","providers","bootstrap","PreviewLightboxComponent","close","onClose","RefreshIconComponent","retry","FilePickerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Injectable()\nexport class FilePickerService {\n  constructor(private sanitizer: DomSanitizer) { }\n  mockUploadFile(formData): Observable<any> {\n    const event = new CustomEvent('customevent', {\n      detail: {\n        type: 'UploadProgreess'\n      }\n    });\n    return of (event.detail);\n  }\n  createSafeUrl(file): SafeResourceUrl {\n    if ((<any> window).UPLOADER_TEST_MODE) {return;}\n    try {\n      const url = window.URL.createObjectURL(file);\n    const safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    return safeUrl;\n\n    } catch (er) {\n      console.log(er);\n    }\n  }\n}\n","import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nexport function getFileType(fileExtension: string): string {\n  if (fileExtension.includes('image')) {\n    return 'image';\n  } else if (fileExtension.includes('video')) {\n    return 'video';\n  } else {\n    return 'other';\n  }\n}\n\n","export interface ValidationError {\n  file: File;\n  error: string; // is FileValidationType enum type\n}\nexport enum FileValidationTypes {\n  fileMaxSize = 'FILE_MAX_SIZE',\n  fileMaxCount = 'FILE_MAX_COUNT',\n  totalMaxSize = 'TOTAL_MAX_SIZE',\n  extensions = 'EXTENSIONS',\n  uploadType = 'UPLOAD_TYPE',\n  customValidator = 'CUSTOM_VALIDATOR'\n}\n","import { FilePreviewModel } from './file-preview.model';\nimport { Observable } from 'rxjs';\n\nexport abstract class FilePickerAdapter {\n public abstract uploadFile(fileItem: FilePreviewModel): Observable<number| string>;\n public abstract removeFile(fileItem: FilePreviewModel): Observable<any>;\n}\n","import { UploaderCaptions } from \"./uploader-captions\";\n\nexport const DefaultCaptions: UploaderCaptions = {\n    dropzone: {\n        title: \"Drag and drop file here\",\n        or: \"or\",\n        browse: \"Browse Files\"\n    },\n    cropper: {\n        crop: \"Crop\",\n        cancel: \"Cancel\"\n    },\n    previewCard: {\n        remove: \"Remove\",\n        uploadError: \"Error on upload\"\n    }\n}","import { FilePickerService } from './file-picker.service';\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef\n} from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { FilePreviewModel } from './file-preview.model';\nimport { getFileType } from './file-upload.utils';\nimport { FileValidationTypes, ValidationError } from './validation-error.model';\nimport { FilePickerAdapter } from './file-picker.adapter';\nimport {\n  FileSystemDirectoryEntry,\n  FileSystemFileEntry,\n  UploadEvent\n} from './file-drop';\nimport { combineLatest, Observable, of, Subject } from 'rxjs';\nimport { map, takeUntil, tap } from 'rxjs/operators';\nimport { DefaultCaptions } from './default-captions';\nimport { UploaderCaptions } from './uploader-captions';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var Cropper;\n@Component({\n  selector: 'ngx-file-picker',\n  templateUrl: './file-picker.component.html',\n  styleUrls: ['./file-picker.component.scss']\n})\nexport class FilePickerComponent implements OnInit, OnDestroy {\n  /** Emitted when file upload via api successfully. Emitted for every file */\n  @Output() uploadSuccess = new EventEmitter<FilePreviewModel>();\n  /** Emitted when file upload via api failed. Emitted for every file */\n  @Output() uploadFail = new EventEmitter<HttpErrorResponse>();\n  /** Emitted when file is removed via api successfully. Emitted for every file */\n  @Output() removeSuccess = new EventEmitter<FilePreviewModel>();\n  /** Emitted on file validation fail */\n  @Output() validationError = new EventEmitter<ValidationError>();\n  /** Emitted when file is added and passed validations. Not uploaded yet */\n  @Output() fileAdded = new EventEmitter<FilePreviewModel>();\n  /** Custom validator function */\n  @Input() customValidator: (file: File) => Observable<boolean>;\n  /** Whether to enable cropper. Default: disabled */\n  @Input()\n  enableCropper = false;\n  /** Whether to show default drag and drop zone. Default:true */\n  @Input() showeDragDropZone = true;\n  /** Whether to show default files preview container. Default: true */\n  @Input() showPreviewContainer = true;\n  /** Preview Item template */\n  @Input() itemTemplate: TemplateRef<any>;\n  /** Single or multiple. Default: multi */\n  @Input()\n  uploadType = 'multi';\n  /** Max size of selected file in MB. Default: no limit */\n  @Input()\n  fileMaxSize: number;\n  /** Max count of file in multi-upload. Default: no limit */\n  @Input()\n  fileMaxCount: number;\n  /** Total Max size limit of all files in MB. Default: no limit */\n  @Input()\n  totalMaxSize: number;\n  /** Which file types to show on choose file dialog. Default: show all */\n  @Input()\n  accept: string;\n  files: FilePreviewModel[] = [];\n  /** File extensions filter */\n  @Input() fileExtensions: String[];\n  cropper: any;\n  /** Cropper options. */\n  @Input() cropperOptions: Object;\n  /** Files array for cropper. Will be shown equentially if crop enabled */\n  filesForCropper: File[] = [];\n  /** Current file to be shown in cropper*/\n  currentCropperFile: File;\n  /** Custom api Adapter for uploading/removing files */\n  @Input()\n  adapter: FilePickerAdapter;\n  /**  Custome template for dropzone */\n  @Input() dropzoneTemplate: TemplateRef<any>;\n  /** Custom captions input. Used for multi language support */\n  @Input() captions: UploaderCaptions;\n  /** captions object*/\n  _captions: UploaderCaptions;\n  cropClosed$ = new Subject<FilePreviewModel>();\n  _onDestroy$ = new Subject<void>();\n  safeCropImgUrl: SafeResourceUrl;\n  constructor(\n    private fileService: FilePickerService,\n    private elementRef: ElementRef\n  ) {}\n\n  ngOnInit() {\n    this.setCropperOptions();\n    this.listenToCropClose();\n    this.setCaptions();\n  }\n  ngOnDestroy() {\n    this._onDestroy$.next();\n  }\n  setCaptions() {\n    this._captions = this.captions || DefaultCaptions;\n  }\n  /** Listen when Cropper is closed and open new cropper if next image exists */\n  listenToCropClose() {\n    this.cropClosed$\n      .pipe(takeUntil(this._onDestroy$))\n      .subscribe((res: FilePreviewModel) => {\n        const croppedIndex = this.filesForCropper.findIndex(\n          item => item.name === res.fileName\n        );\n        const nextFile =\n          croppedIndex !== -1\n            ? this.filesForCropper[croppedIndex + 1]\n            : undefined;\n        // console.log(nextFile)\n        //  console.log('cropped', res);\n        this.filesForCropper = [...this.filesForCropper].filter(\n          item => item.name !== res.fileName\n        );\n        // console.log(this.filesForCropper);\n        if (nextFile) {\n          this.openCropper(nextFile);\n        }\n      });\n  }\n  /** Sets custom cropper options if avaiable */\n  setCropperOptions() {\n    if (!this.cropperOptions) {\n      this.setDefaultCropperOptions();\n    }\n  }\n  /** Sets manual cropper options if no custom options are avaiable */\n  setDefaultCropperOptions() {\n    this.cropperOptions = {\n      dragMode: 'crop',\n      aspectRatio: 1,\n      autoCrop: true,\n      movable: true,\n      zoomable: true,\n      scalable: true,\n      autoCropArea: 0.8\n    };\n  }\n  /** On input file selected */\n  onChange(fileInput: HTMLInputElement) {\n    const files: File[] = Array.from(fileInput.files);\n    this.handleFiles(files).subscribe();\n  }\n  /** Handles input and drag/drop files */\n  handleFiles(files: File[]): Observable<void> {\n    if (!this.isValidMaxFileCount(files)) {\n      return of(null);\n    }\n    const isValidUploadSync = files.every(item => this.validateFileSync(item));\n    const asyncFunctions = files.map(item => this.validateFileAsync(item));\n    return combineLatest(...asyncFunctions).pipe(\n      map(res => {\n        const isValidUploadAsync = res.every(result => result === true);\n        if (!isValidUploadSync || !isValidUploadAsync) {\n          return;\n        }\n        files.forEach((file: File, index: number) => {\n          this.handleInputFile(file, index);\n        });\n      })\n    );\n  }\n  /** Validates synchronous validations */\n  validateFileSync(file: File): boolean {\n    if (!file) {\n      return;\n    }\n    if (!this.isValidUploadType(file)) {\n      return;\n    }\n    if (!this.isValidExtension(file, file.name)) {\n      return;\n    }\n    return true;\n  }\n  /** Validates asynchronous validations */\n  validateFileAsync(file: File): Observable<boolean> {\n    if (!this.customValidator) {\n      return of(true);\n    }\n    return this.customValidator(file).pipe(\n      tap(res => {\n        if (!res) {\n          this.validationError.next({\n            file: file,\n            error: FileValidationTypes.customValidator\n          });\n        }\n      })\n    );\n  }\n  /** Handles input and drag&drop files */\n  handleInputFile(file: File, index): void {\n    const type = getFileType(file.type);\n    if (type === 'image' && this.enableCropper) {\n      this.filesForCropper.push(file);\n      if (!this.currentCropperFile) {\n        this.openCropper(file);\n      }\n    } else {\n      /** Size is not initially checked on handleInputFiles because of cropper size change */\n      if (this.isValidSize(file, file.size)) {\n        this.pushFile(file);\n      }\n    }\n  }\n  /** Validates if upload type is single so another file cannot be added */\n  isValidUploadType(file): boolean {\n    if (this.uploadType === 'single' && this.files.length > 0) {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.uploadType\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /** Validates max file count */\n  isValidMaxFileCount(files: File[]): boolean {\n    if (\n      !this.fileMaxCount ||\n      this.fileMaxCount >= this.files.length + files.length\n    ) {\n      return true;\n    } else {\n      this.validationError.next({\n        file: null,\n        error: FileValidationTypes.fileMaxCount\n      });\n      return false;\n    }\n  }\n  /** On file dropped */\n  dropped(event: UploadEvent) {\n    const files = event.files;\n    const filesForUpload: File[] = [];\n    for (const droppedFile of event.files) {\n      // Is it a file?\n      if (droppedFile.fileEntry.isFile) {\n        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n        fileEntry.file((file: File) => {\n          filesForUpload.push(file);\n        });\n      } else {\n        // It was a directory (empty directories are added, otherwise only files)\n        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n        // console.log(droppedFile.relativePath, fileEntry);\n      }\n    }\n    setTimeout(() => this.handleFiles(filesForUpload).subscribe());\n  }\n  /** Add file to file list after succesfull validation */\n  pushFile(file: File, fileName = file.name): void {\n    this.files.push({ file: file, fileName: fileName });\n    this.fileAdded.next({ file: file, fileName: fileName });\n  }\n  /** Opens cropper for image crop */\n  openCropper(file: File): void {\n    if ((<any>window).UPLOADER_TEST_MODE || typeof Cropper !== 'undefined') {\n      this.safeCropImgUrl = this.fileService.createSafeUrl(file);\n      this.currentCropperFile = file;\n    } else {\n      console.warn(\n        \"please import cropperjs script and styles to use cropper feature or disable it by setting [enableCropper]='false'\"\n      );\n      return;\n    }\n  }\n  getSafeUrl(file: File): SafeResourceUrl {\n    return this.fileService.createSafeUrl(file);\n  }\n  /** On img load event */\n  cropperImgLoaded(e): void {\n    const image = document.getElementById('cropper-img');\n    this.cropper = new Cropper(image, this.cropperOptions);\n  }\n  /** Close or cancel cropper */\n  closeCropper(filePreview: FilePreviewModel): void {\n    this.currentCropperFile = undefined;\n    this.cropper = undefined;\n    setTimeout(() => this.cropClosed$.next(filePreview), 200);\n  }\n  /** Removes files from files list */\n  removeFileFromList(file: FilePreviewModel): void {\n    this.files = this.files.filter(f => f !== file);\n  }\n\n  /** Emits event when file upload api returns success  */\n  onUploadSuccess(fileItem: FilePreviewModel): void {\n    this.uploadSuccess.next(fileItem);\n  }\n\n  /** Emits event when file upload api returns success  */\n  onUploadFail(er: HttpErrorResponse): void {\n    this.uploadFail.next(er);\n  }\n\n  /** Validates file extension */\n  isValidExtension(file: File, fileName: string): boolean {\n      if (!this.fileExtensions) {return true; }\n      const extension = fileName.split('.').pop();\n      const fileExtensions = this.fileExtensions.map(ext => ext.toLowerCase());\n      if (fileExtensions.indexOf(extension.toLowerCase()) === -1) {\n        this.validationError.next({file: file, error: FileValidationTypes.extensions});\n        return false;\n      }\n  }\n  /** Validates selected file size and total file size */\n  isValidSize(file: File, size: number): boolean {\n    /** Validating selected file size */\n    const res: number = this.bitsToMb(size.toString());\n    let isValidFileSize: boolean;\n    let isValidTotalFileSize: boolean;\n    if (!this.fileMaxSize || (this.fileMaxSize && res < this.fileMaxSize)) {\n      isValidFileSize = true;\n    } else {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.fileMaxSize\n      });\n    }\n    /** Validating Total Files Size */\n    const totalBits = this.files\n      .map(f => f.file.size)\n      .reduce((acc, curr) => acc + curr, 0);\n    if (\n      !this.totalMaxSize ||\n      (this.totalMaxSize &&\n        this.bitsToMb(totalBits + file.size) < this.totalMaxSize)\n    ) {\n      isValidTotalFileSize = true;\n    } else {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.totalMaxSize\n      });\n    }\n    return !!isValidFileSize && isValidTotalFileSize;\n  }\n  bitsToMb(size): number {\n    return parseFloat(size) / 1048576;\n  }\n  /** when crop button submitted */\n  onCropSubmit(): void {\n    const canvas = this.cropper.getCroppedCanvas();\n    if (canvas != null) {\n      this.cropper.getCroppedCanvas().toBlob(this.blobFallBack.bind(this), 'image/jpeg');\n    }\n  }\n  /** After crop submit */\n  blobFallBack(blob: Blob): void {\n    if (!blob) {\n      return;\n    }\n    if (this.isValidSize(<File>blob, blob.size)) {\n      this.pushFile(<File>blob, this.currentCropperFile.name);\n    }\n    this.closeCropper({\n      file: blob as File,\n      fileName: this.currentCropperFile.name\n    });\n  }\n  removeFile(fileItem: FilePreviewModel): void {\n    if (this.adapter) {\n      this.adapter.removeFile(fileItem).subscribe(res => {\n        this.onRemoveSuccess(fileItem);\n      });\n    } else {\n      console.warn('no adapter was provided');\n    }\n  }\n  /** Emits event when file remove api returns success  */\n  onRemoveSuccess(fileItem: FilePreviewModel): void {\n    this.removeSuccess.next(fileItem);\n    this.removeFileFromList(fileItem);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'close-icon',\n  templateUrl: './close-icon.component.html',\n  styleUrls: ['./close-icon.component.scss']\n})\nexport class CloseIconComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { FilePickerService } from './../../file-picker.service';\nimport { FilePreviewModel } from './../../file-preview.model';\nimport { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { HttpEvent, HttpEventType, HttpErrorResponse } from '@angular/common/http';\nimport { getFileType} from '../../file-upload.utils';\nimport {  Subscription } from 'rxjs';\nimport { FilePickerAdapter } from '../../file-picker.adapter';\nimport { UploaderCaptions } from '../../uploader-captions';\n\n@Component({\n  selector: 'file-preview-item',\n  templateUrl: './file-preview-item.component.html',\n  styleUrls: ['./file-preview-item.component.scss']\n})\nexport class FilePreviewItemComponent implements OnInit {\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadFail = new EventEmitter<HttpErrorResponse>();\n  @Output() public imageClicked = new EventEmitter<FilePreviewModel>();\n  @Input() public fileItem: FilePreviewModel;\n  @Input() adapter: FilePickerAdapter;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() captions: UploaderCaptions;\n  icon = 'checkmark';\n  uploadProgress: number;\n  fileType: string;\n  safeUrl: SafeResourceUrl;\n  uploadError: boolean;\n  uploadSubscription: Subscription;\n  fileId: string;\n  constructor(\n    private fileService: FilePickerService,\n  ) {}\n\n  ngOnInit() {\n  this.uploadFile(this.fileItem);\n    this.fileType = getFileType(this.fileItem.file.type);\n    this.safeUrl = this.getSafeUrl(this.fileItem.file);\n  }\n  getSafeUrl(file: File | Blob): SafeResourceUrl {\n    return this.fileService.createSafeUrl(file);\n  }\n  /** Converts bytes to nice size */\n  niceBytes(x): string {\n    const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let l = 0,\n      n = parseInt(x, 10) || 0;\n    while (n >= 1024 && ++l) {\n      n = n / 1024;\n    }\n    // include a decimal point and a tenths-place digit if presenting\n    // less than ten of KB or greater units\n    return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n  }\n  /** Retry file upload when upload was unsuccessfull */\n  onRetry(): void {\n    this.uploadFile(this.fileItem);\n  }\n  onCheckMarkClick() {\n    this.icon = 'error';\n  }\n  uploadFile(fileItem: FilePreviewModel): void {\n    if (this.adapter) {\n      this.uploadSubscription =\n      this.adapter.uploadFile(fileItem)\n      .subscribe((res: number | string) => {\n        if (typeof res === 'string') {\n          this.onUploadSuccess(res, fileItem);\n          this.uploadProgress = undefined;\n        }\n        if (typeof res === 'number') {\n          this.uploadProgress = res;\n        //  this.handleProgressResponse(<HttpEvent<any>>res, fileItem);\n        }\n      }, (er: HttpErrorResponse) => {\n        this.uploadError = true;\n        this.uploadFail.next(er);\n        this.uploadProgress = undefined;\n  });\n    } else {\n      console.warn('no adapter was provided');\n    }\n  }\n  /** Emits event when file upload api returns success  */\n  onUploadSuccess(id: string, fileItem: FilePreviewModel): void {\n    this.fileId = id;\n    this.fileItem.fileId = id;\n    this.uploadSuccess.next({...fileItem, fileId: id});\n  }\n  handleProgressResponse(event: HttpEvent<any> , fileName) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return ;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        this.uploadProgress = Math.round((100 * event.loaded) / event.total);\n       return;\n\n      case HttpEventType.Response:\n        const body: any = event.body;\n        if (body && body.data) {\n         // this.uploaded.next(res.data.toString());\n        }\n        this.uploadProgress = undefined;\n        return;\n      default:\n        this.uploadProgress = undefined;\n        return `File \"${fileName}\" surprising upload event: ${event.type}.`;\n    }\n  }\n onRemove(fileItem: FilePreviewModel): void {\n  this.uploadUnsubscribe();\n  this.removeFile.next(fileItem);\n }\n /** Cancel upload. Cancels request  */\n uploadUnsubscribe(): void {\n  if (this.uploadSubscription) {\n    this.uploadSubscription.unsubscribe();\n   }\n }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { FilePreviewModel } from '../file-preview.model';\nimport { FilePickerAdapter } from '../file-picker.adapter';\nimport { UploaderCaptions } from '../uploader-captions';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'file-preview-container',\n  templateUrl: './file-preview-container.component.html',\n  styleUrls: ['./file-preview-container.component.scss']\n})\nexport class FilePreviewContainerComponent implements OnInit {\n  @Input() previewFiles: FilePreviewModel[];\n  @Input() itemTemplate: TemplateRef<any>;\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadFail = new EventEmitter<HttpErrorResponse>();\n  lightboxFile: FilePreviewModel;\n  @Input() adapter: FilePickerAdapter;\n  @Input() captions: UploaderCaptions;\n  constructor() { }\n\n  ngOnInit() {\n  }\n  openLightbox(file: FilePreviewModel) {\n   this.lightboxFile = file;\n  }\n  closeLightbox() {\n    this.lightboxFile = undefined;\n  }\n\n}\n","import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\n\n/**\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\n * properties of the given {@link FileSystemEntry}.\n */\nexport class UploadFile {\n    constructor(\n        public relativePath: string,\n        public fileEntry: FileSystemEntry) {\n    }\n}\n","import { UploadFile } from './upload-file.model';\n\nexport class UploadEvent {\n    constructor(\n        public files: UploadFile[]) {\n    }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  NgZone,\n  OnDestroy,\n  Renderer2\n} from '@angular/core';\nimport { timer, Subscription } from 'rxjs';\n\nimport { UploadFile } from './upload-file.model';\nimport { UploadEvent } from './upload-event.model';\nimport {\n  FileSystemFileEntry,\n  FileSystemEntry,\n  FileSystemDirectoryEntry\n} from './dom.types';\nimport { UploaderCaptions } from '../uploader-captions';\n\n@Component({\n  selector: 'file-drop',\n  templateUrl: './file-drop.component.html',\n  styleUrls: ['./file-drop.component.scss']\n})\nexport class FileComponent implements OnDestroy {\n  @Input()\n  captions: UploaderCaptions;\n  @Input()\n  customstyle: string = null;\n  @Input()\n  disableIf = false;\n\n  @Output()\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<\n    UploadEvent\n  >();\n  @Output()\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\n\n  stack = [];\n  files: UploadFile[] = [];\n  subscription: Subscription;\n  dragoverflag = false;\n\n  globalDisable = false;\n  globalStart: Function;\n  globalEnd: Function;\n\n  numOfActiveReadEntries = 0;\n  constructor(private zone: NgZone, private renderer: Renderer2) {\n    if (!this.customstyle) {\n      this.customstyle = 'drop-zone';\n    }\n    this.globalStart = this.renderer.listen('document', 'dragstart', evt => {\n      this.globalDisable = true;\n    });\n    this.globalEnd = this.renderer.listen('document', 'dragend', evt => {\n      this.globalDisable = false;\n    });\n  }\n  public onDragOver(event: Event): void {\n    if (!this.globalDisable && !this.disableIf) {\n      if (!this.dragoverflag) {\n        this.dragoverflag = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  public onDragLeave(event: Event): void {\n    if (!this.globalDisable && !this.disableIf) {\n      if (this.dragoverflag) {\n        this.dragoverflag = false;\n        this.onFileLeave.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  dropFiles(event: any) {\n    if (!this.globalDisable && !this.disableIf) {\n      this.dragoverflag = false;\n      event.dataTransfer.dropEffect = 'copy';\n      let length;\n      if (event.dataTransfer.items) {\n        length = event.dataTransfer.items.length;\n      } else {\n        length = event.dataTransfer.files.length;\n      }\n\n      for (let i = 0; i < length; i++) {\n        let entry: FileSystemEntry;\n        if (event.dataTransfer.items) {\n          if (event.dataTransfer.items[i].webkitGetAsEntry) {\n            entry = event.dataTransfer.items[i].webkitGetAsEntry();\n          }\n        } else {\n          if (event.dataTransfer.files[i].webkitGetAsEntry) {\n            entry = event.dataTransfer.files[i].webkitGetAsEntry();\n          }\n        }\n        if (!entry) {\n          const file: File = event.dataTransfer.files[i];\n          if (file) {\n            const fakeFileEntry: FileSystemFileEntry = {\n              name: file.name,\n              isDirectory: false,\n              isFile: true,\n              file: (callback: (filea: File) => void): void => {\n                callback(file);\n              }\n            };\n            const toUpload: UploadFile = new UploadFile(\n              fakeFileEntry.name,\n              fakeFileEntry\n            );\n            this.addToQueue(toUpload);\n          }\n        } else {\n          if (entry.isFile) {\n            const toUpload: UploadFile = new UploadFile(entry.name, entry);\n            this.addToQueue(toUpload);\n          } else if (entry.isDirectory) {\n            this.traverseFileTree(entry, entry.name);\n          }\n        }\n      }\n\n      this.preventAndStop(event);\n\n      const timerObservable = timer(200, 200);\n      this.subscription = timerObservable.subscribe(t => {\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n          this.onFileDrop.emit(new UploadEvent(this.files));\n          this.files = [];\n        }\n      });\n    }\n  }\n\n  private traverseFileTree(item: FileSystemEntry, path: string) {\n    if (item.isFile) {\n      const toUpload: UploadFile = new UploadFile(path, item);\n      this.files.push(toUpload);\n      this.zone.run(() => {\n        this.popToStack();\n      });\n    } else {\n      this.pushToStack(path);\n      path = path + '/';\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\n      let entries = [];\n      const thisObj = this;\n\n      const readEntries = function() {\n        thisObj.numOfActiveReadEntries++;\n        dirReader.readEntries(function(res) {\n          if (!res.length) {\n            // add empty folders\n            if (entries.length === 0) {\n              const toUpload: UploadFile = new UploadFile(path, item);\n              thisObj.zone.run(() => {\n                thisObj.addToQueue(toUpload);\n              });\n            } else {\n              for (let i = 0; i < entries.length; i++) {\n                thisObj.zone.run(() => {\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\n                });\n              }\n            }\n            thisObj.zone.run(() => {\n              thisObj.popToStack();\n            });\n          } else {\n            // continue with the reading\n            entries = entries.concat(res);\n            readEntries();\n          }\n          thisObj.numOfActiveReadEntries--;\n        });\n      };\n\n      readEntries();\n    }\n  }\n\n  private addToQueue(item: UploadFile) {\n    this.files.push(item);\n  }\n\n  pushToStack(str) {\n    this.stack.push(str);\n  }\n\n  popToStack() {\n    const value = this.stack.pop();\n  }\n\n  private clearQueue() {\n    this.files = [];\n  }\n\n  private preventAndStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.globalStart();\n    this.globalEnd();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'cloud-icon',\n  templateUrl: './cloud-icon.component.html',\n  styleUrls: ['./cloud-icon.component.scss']\n})\nexport class CloudIconComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {FileComponent} from './file-drop.component';\nimport { CloudIconComponent } from '../icons/cloud-icon/cloud-icon.component';\n\n@NgModule({\n  declarations: [\n    FileComponent,\n    CloudIconComponent\n  ],\n  exports: [FileComponent],\n  imports: [CommonModule],\n  providers: [],\n  bootstrap: [FileComponent],\n})\nexport class FileDropModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FilePreviewModel } from '../../file-preview.model';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'preview-lightbox',\n  templateUrl: './preview-lightbox.component.html',\n  styleUrls: ['./preview-lightbox.component.scss']\n})\nexport class PreviewLightboxComponent implements OnInit {\n  @Input() file: FilePreviewModel;\n  @Output() close = new EventEmitter<void>();\n  loaded: boolean;\n  safeUrl: SafeResourceUrl;\n  constructor(private sanitizer: DomSanitizer) { }\n\n  ngOnInit() {\n    this.getSafeUrl(this.file.file);\n  }\n  getSafeUrl(file: File | Blob): void {\n    const url = window.URL.createObjectURL(file);\n    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  onClose(event): void {\n   this.close.next();\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'refresh-icon',\n  templateUrl: './refresh-icon.component.html',\n  styleUrls: ['./refresh-icon.component.scss']\n})\nexport class RefreshIconComponent implements OnInit {\n   @Output() public retry  = new EventEmitter<void>();\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { CloseIconComponent } from './icons/close-icon/close-icon.component';\nimport { FilePreviewItemComponent } from './file-preview-container/file-preview-item/file-preview-item.component';\nimport { FilePreviewContainerComponent } from './file-preview-container/file-preview-container.component';\nimport { NgModule } from '@angular/core';\nimport { FilePickerComponent } from './file-picker.component';\nimport { CommonModule } from '@angular/common';\nimport { FilePickerService } from './file-picker.service';\nimport { FileDropModule } from './file-drop/file-drop.module';\nimport { PreviewLightboxComponent } from './file-preview-container/preview-lightbox/preview-lightbox.component';\nimport { RefreshIconComponent } from './file-preview-container/file-preview-item/refresh-icon/refresh-icon.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FileDropModule,\n  ],\n  declarations: [\n    FilePickerComponent,\n    FilePreviewContainerComponent,\n    FilePreviewItemComponent,\n    PreviewLightboxComponent,\n    RefreshIconComponent,\n    CloseIconComponent\n  ],\n  exports: [FilePickerComponent],\n  providers: [FilePickerService]\n})\nexport class FilePickerModule {}\n"]}