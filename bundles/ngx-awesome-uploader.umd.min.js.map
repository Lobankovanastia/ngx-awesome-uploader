{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-awesome-uploader/lib/file-picker.service.ts","ng://ngx-awesome-uploader/lib/file-upload.utils.ts","ng://ngx-awesome-uploader/lib/validation-error.model.ts","ng://ngx-awesome-uploader/lib/file-picker.adapter.ts","ng://ngx-awesome-uploader/lib/default-captions.ts","ng://ngx-awesome-uploader/lib/file-dropping-process.model.ts","ng://ngx-awesome-uploader/lib/cropper-options.model.ts","ng://ngx-awesome-uploader/lib/file-picker.component.ts","ng://ngx-awesome-uploader/lib/icons/close-icon/close-icon.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/file-preview-item.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-container.component.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-file.model.ts","ng://ngx-awesome-uploader/lib/file-drop/upload-event.model.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.component.ts","ng://ngx-awesome-uploader/lib/icons/cloud-icon/cloud-icon.component.ts","ng://ngx-awesome-uploader/lib/file-drop/file-drop.module.ts","ng://ngx-awesome-uploader/lib/file-preview-container/preview-lightbox/preview-lightbox.component.ts","ng://ngx-awesome-uploader/lib/file-preview-container/file-preview-item/refresh-icon/refresh-icon.component.ts","ng://ngx-awesome-uploader/lib/file-picker.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","FilePickerService","sanitizer","mockUploadFile","formData","event","CustomEvent","detail","type","of","createSafeUrl","file","UPLOADER_TEST_MODE","url","window","URL","createObjectURL","bypassSecurityTrustResourceUrl","er","console","log","Injectable","DomSanitizer","getFileType","fileExtension","includes","fileMaxSize","fileMaxCount","totalMaxSize","extensions","uploadType","customValidator","DefaultCaptions","dropzone","title","or","browse","cropper","crop","cancel","previewCard","remove","uploadError","FileDroppingProcessModel","expectedLength","timerCounter","filesForUpload","checkTimeIntervalMS","addFileForUpload","diminishCounter","isProcessingFinished","setExpectedLength","getFiles","CropperOptionsModel","_a","_b","aspectRatio","_c","maintainAspectRatio","_d","resizeToWidth","_e","resizeToHeight","_f","cropperStaticWidth","_g","cropperStaticHeight","_h","cropperMinWidth","_j","cropperMinHeight","_k","initialStepSize","_l","onlyScaleDown","_m","roundCropper","_o","imageQuality","_p","alignImage","_q","backgroundColor","_r","hideResizeSquares","_s","disabled","_t","canvasRotation","_u","transform","_v","loadImageFailed","FilePickerComponent","fileService","ref","uploadSuccess","EventEmitter","uploadFail","removeSuccess","validationError","fileAdded","enableCropper","showeDragDropZone","showPreviewContainer","files","filesForCropper","cropClosed$","Subject","_onDestroy$","cropperIsReady","ngOnInit","setCropperOptions","listenToCropClose","setCaptions","ngOnDestroy","_captions","captions","_this","subscribe","res","croppedIndex","findIndex","item","name","fileName","nextFile","undefined","tslib_1.__spread","filter","openCropper","cropperOptions","onChange","fileInput","Array","from","handleFiles","isValidMaxFileCount","isValidUploadSync","every","validateFileSync","asyncFunctions","map","validateFileAsync","combineLatest","pipe","isValidUploadAsync","result","forEach","index","handleInputFile","isValidUploadType","isValidExtension","tap","FileValidationTypes","currentCropperFile","detectChanges","isValidSize","size","pushFile","dropped","droppingProcess","tslib_1.__values","droppedFile","fileEntry","isFile","handleFilesIfDroppingProcessIsFinished","getSafeUrl","closeCropper","filePreview","removeFileFromList","f","onUploadSuccess","fileItem","onUploadFail","fileExtensions","extension","split","pop","ext","toLowerCase","indexOf","isValidFileSize","isValidTotalFileSize","bitsToMb","toString","totalBits","reduce","acc","curr","parseFloat","onCropSubmit","blobFallBack","croppedImage","blob","removeFile","adapter","onRemoveSuccess","warn","imageCropped","base64ToFile","base64","imageLoaded","Function","setTimeout","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Output","Input","CloseIconComponent","FilePreviewItemComponent","imageClicked","icon","uploadFile","fileType","safeUrl","niceBytes","x","l","parseInt","toFixed","onRetry","onCheckMarkClick","uploadSubscription","uploadProgress","id","fileId","handleProgressResponse","HttpEventType","Sent","UploadProgress","Math","round","loaded","total","Response","body","data","onRemove","uploadUnsubscribe","unsubscribe","FilePreviewContainerComponent","openLightbox","lightboxFile","closeLightbox","relativePath","UploadEvent","FileComponent","zone","renderer","customstyle","disableIf","onFileDrop","onFileOver","onFileLeave","stack","dragoverflag","globalDisable","numOfActiveReadEntries","globalStart","listen","evt","globalEnd","onDragOver","emit","preventAndStop","onDragLeave","dropFiles","length_1","dataTransfer","dropEffect","items","entry","webkitGetAsEntry","toUpload","UploadFile","this_1","addToQueue","isDirectory","traverseFileTree","file_1","fakeFileEntry","callback","timerObservable","timer","subscription","path","run","popToStack","pushToStack","dirReader_1","createReader","entries_1","thisObj_1","readEntries_1","readEntries","toUpload_1","str","clearQueue","stopPropagation","preventDefault","NgZone","Renderer2","CloudIconComponent","FileDropModule","NgModule","declarations","exports","imports","CommonModule","providers","bootstrap","PreviewLightboxComponent","close","onClose","RefreshIconComponent","retry","FilePickerModule","ImageCropperModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Injectable()\nexport class FilePickerService {\n  constructor(private sanitizer: DomSanitizer) { }\n  mockUploadFile(formData): Observable<any> {\n    const event = new CustomEvent('customevent', {\n      detail: {\n        type: 'UploadProgreess'\n      }\n    });\n    return of (event.detail);\n  }\n  createSafeUrl(file): SafeResourceUrl {\n    if ((<any> window).UPLOADER_TEST_MODE) {return;}\n    try {\n      const url = window.URL.createObjectURL(file);\n    const safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    return safeUrl;\n\n    } catch (er) {\n      console.log(er);\n    }\n  }\n}\n","import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nexport function getFileType(fileExtension: string): string {\n  if (fileExtension.includes('image')) {\n    return 'image';\n  } else if (fileExtension.includes('video')) {\n    return 'video';\n  } else {\n    return 'other';\n  }\n}\n\n","export interface ValidationError {\n  file: File;\n  error: string; // is FileValidationType enum type\n}\nexport enum FileValidationTypes {\n  fileMaxSize = 'FILE_MAX_SIZE',\n  fileMaxCount = 'FILE_MAX_COUNT',\n  totalMaxSize = 'TOTAL_MAX_SIZE',\n  extensions = 'EXTENSIONS',\n  uploadType = 'UPLOAD_TYPE',\n  customValidator = 'CUSTOM_VALIDATOR'\n}\n","import { FilePreviewModel } from './file-preview.model';\nimport { Observable } from 'rxjs';\n\nexport abstract class FilePickerAdapter {\n public abstract uploadFile(fileItem: FilePreviewModel): Observable<number| string>;\n public abstract removeFile(fileItem: FilePreviewModel): Observable<any>;\n}\n","import { UploaderCaptions } from \"./uploader-captions\";\n\nexport const DefaultCaptions: UploaderCaptions = {\n    dropzone: {\n        title: \"Drag and drop file here\",\n        or: \"or\",\n        browse: \"Browse Files\"\n    },\n    cropper: {\n        crop: \"Crop\",\n        cancel: \"Cancel\"\n    },\n    previewCard: {\n        remove: \"Remove\",\n        uploadError: \"Error on upload\"\n    }\n}","\nexport class FileDroppingProcessModel {\n  private filesForUpload: File[] = [];\n  private timerCounter = 0;\n  private expectedLength = 0;\n  readonly checkTimeIntervalMS = 100;\n\n  constructor(expectedLength: number, timerCounter: number = 20) {\n    this.expectedLength = expectedLength;\n    this.timerCounter = timerCounter;\n  }\n\n  addFileForUpload(file: File): void {\n    this.filesForUpload.push(file);\n  }\n\n  diminishCounter(): void {\n    this.timerCounter--;\n  }\n\n  isProcessingFinished(): boolean {\n    return this.timerCounter === 0 || this.filesForUpload.length === this.expectedLength;\n  }\n\n  setExpectedLength(length: number): void {\n    this.expectedLength = length;\n  }\n\n  getFiles(): File[] {\n    return this.filesForUpload;\n  }\n}\n","import {ImageTransform} from 'ngx-image-cropper';\n\nexport interface CropperOptions {\n  aspectRatio?: number;\n  maintainAspectRatio?: boolean;\n  resizeToWidth?: number;\n  resizeToHeight?: number;\n  cropperStaticWidth?: number;\n  cropperStaticHeight?: number;\n  cropperMinWidth?: number;\n  cropperMinHeight?: number;\n  initialStepSize?: number;\n  onlyScaleDown?: boolean;\n  roundCropper?: boolean;\n  imageQuality?: number;\n  alignImage?: 'left' | 'center';\n  backgroundColor?: string;\n  hideResizeSquares?: boolean;\n  disabled?: boolean;\n  canvasRotation?: number;\n  transform?: ImageTransform;\n  loadImageFailed?: Function;\n}\n\n\nexport class CropperOptionsModel implements CropperOptions {\n  readonly aspectRatio: number;\n  readonly maintainAspectRatio: boolean;\n  readonly resizeToWidth: number;\n  readonly resizeToHeight: number;\n  readonly cropperStaticWidth: number;\n  readonly cropperStaticHeight: number;\n  readonly cropperMinWidth: number;\n  readonly cropperMinHeight: number;\n  readonly initialStepSize: number;\n  readonly onlyScaleDown: boolean;\n  readonly roundCropper: boolean;\n  readonly imageQuality: number;\n  readonly alignImage: 'left' | 'center';\n  readonly backgroundColor: string;\n  readonly hideResizeSquares: boolean;\n  readonly disabled: boolean;\n  readonly canvasRotation: number;\n  readonly transform: ImageTransform;\n  readonly loadImageFailed: Function;\n\n  constructor({\n      aspectRatio = 1,\n      maintainAspectRatio = true,\n      resizeToWidth = 0,\n      resizeToHeight = 0,\n      cropperStaticWidth = 0,\n      cropperStaticHeight = 0,\n      cropperMinWidth = 0,\n      cropperMinHeight= 0,\n      initialStepSize = 3,\n      onlyScaleDown = false,\n      roundCropper = false,\n      imageQuality = 92,\n      alignImage = 'center',\n      backgroundColor = '',\n      hideResizeSquares = false,\n      disabled = false,\n      canvasRotation = 0,\n      transform = {},\n      loadImageFailed = () => {}\n  }: CropperOptions) {\n      this.aspectRatio = aspectRatio;\n      this.maintainAspectRatio = maintainAspectRatio;\n      this.resizeToWidth = resizeToWidth;\n      this.resizeToHeight = resizeToHeight;\n      this.cropperStaticWidth = cropperStaticWidth;\n      this.cropperStaticHeight = cropperStaticHeight;\n      this.cropperMinWidth = cropperMinWidth;\n      this.cropperMinHeight = cropperMinHeight;\n      this.initialStepSize = initialStepSize;\n      this.onlyScaleDown = onlyScaleDown;\n      this.roundCropper = roundCropper;\n      this.imageQuality = imageQuality;\n      this.alignImage = alignImage;\n      this.backgroundColor = backgroundColor;\n      this.hideResizeSquares = hideResizeSquares;\n      this.disabled = disabled;\n      this.canvasRotation = canvasRotation;\n      this.transform = transform;\n      this.loadImageFailed = loadImageFailed;\n  }\n}\n","import { FilePickerService } from './file-picker.service';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef\n} from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { FilePreviewModel } from './file-preview.model';\nimport { getFileType } from './file-upload.utils';\nimport { FileValidationTypes, ValidationError } from './validation-error.model';\nimport { FilePickerAdapter } from './file-picker.adapter';\nimport {\n  FileSystemDirectoryEntry,\n  FileSystemFileEntry,\n  UploadEvent\n} from './file-drop';\nimport { combineLatest, Observable, of, Subject } from 'rxjs';\nimport { map, takeUntil, tap } from 'rxjs/operators';\nimport { DefaultCaptions } from './default-captions';\nimport { UploaderCaptions } from './uploader-captions';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {base64ToFile, ImageCroppedEvent} from 'ngx-image-cropper';\nimport {FileDroppingProcessModel} from './file-dropping-process.model';\nimport {CropperOptions, CropperOptionsModel} from './cropper-options.model';\n\n// declare var Cropper;\n@Component({\n  selector: 'ngx-file-picker',\n  templateUrl: './file-picker.component.html',\n  styleUrls: ['./file-picker.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FilePickerComponent implements OnInit, OnDestroy {\n  /** Emitted when file upload via api successfully. Emitted for every file */\n  @Output() uploadSuccess = new EventEmitter<FilePreviewModel>();\n  /** Emitted when file upload via api failed. Emitted for every file */\n  @Output() uploadFail = new EventEmitter<HttpErrorResponse>();\n  /** Emitted when file is removed via api successfully. Emitted for every file */\n  @Output() removeSuccess = new EventEmitter<FilePreviewModel>();\n  /** Emitted on file validation fail */\n  @Output() validationError = new EventEmitter<ValidationError>();\n  /** Emitted when file is added and passed validations. Not uploaded yet */\n  @Output() fileAdded = new EventEmitter<FilePreviewModel>();\n  /** Custom validator function */\n  @Input() customValidator: (file: File) => Observable<boolean>;\n  /** Whether to enable cropper. Default: disabled */\n  @Input()\n  enableCropper = false;\n  /** Whether to show default drag and drop zone. Default:true */\n  @Input() showeDragDropZone = true;\n  /** Whether to show default files preview container. Default: true */\n  @Input() showPreviewContainer = true;\n  /** Preview Item template */\n  @Input() itemTemplate: TemplateRef<any>;\n  /** Single or multiple. Default: multi */\n  @Input()\n  uploadType = 'multi';\n  /** Max size of selected file in MB. Default: no limit */\n  @Input()\n  fileMaxSize: number;\n  /** Max count of file in multi-upload. Default: no limit */\n  @Input()\n  fileMaxCount: number;\n  /** Total Max size limit of all files in MB. Default: no limit */\n  @Input()\n  totalMaxSize: number;\n  /** Which file types to show on choose file dialog. Default: show all */\n  @Input()\n  accept: string;\n  files: FilePreviewModel[] = [];\n  /** File extensions filter */\n  @Input() fileExtensions: String[];\n  cropper: any;\n  /** Cropper options. */\n  @Input() cropperOptions: CropperOptions;\n  /** Files array for cropper. Will be shown equentially if crop enabled */\n  filesForCropper: File[] = [];\n  /** Current file to be shown in cropper*/\n  currentCropperFile: File;\n  /** Custom api Adapter for uploading/removing files */\n  @Input()\n  adapter: FilePickerAdapter;\n  /**  Custome template for dropzone */\n  @Input() dropzoneTemplate: TemplateRef<any>;\n  /** Custom captions input. Used for multi language support */\n  @Input() captions: UploaderCaptions;\n  /** captions object*/\n  _captions: UploaderCaptions;\n  cropClosed$ = new Subject<FilePreviewModel>();\n  _onDestroy$ = new Subject<void>();\n\n  croppedImage: Blob;\n  cropperIsReady = false;\n\n  private droppingProcess: FileDroppingProcessModel;\n\n  constructor(\n    private fileService: FilePickerService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.setCropperOptions();\n    this.listenToCropClose();\n    this.setCaptions();\n  }\n  ngOnDestroy() {\n    this._onDestroy$.next();\n  }\n  setCaptions() {\n    this._captions = this.captions || DefaultCaptions;\n  }\n  /** Listen when Cropper is closed and open new cropper if next image exists */\n  listenToCropClose() {\n    this.cropClosed$\n      // .pipe(takeUntil(this._onDestroy$))\n      .subscribe((res: FilePreviewModel) => {\n        const croppedIndex = this.filesForCropper.findIndex(\n          item => item.name === res.fileName\n        );\n        const nextFile =\n          croppedIndex !== -1\n            ? this.filesForCropper[croppedIndex + 1]\n            : undefined;\n        //  console.log('cropped', res);\n        this.filesForCropper = [...this.filesForCropper].filter(\n          item => item.name !== res.fileName\n        );\n        // console.log(this.filesForCropper);\n        if (nextFile) {\n          this.openCropper(nextFile);\n        }\n      });\n  }\n\n  /** Sets custom cropper options if avaiable */\n  setCropperOptions() {\n    this.cropperOptions = this.cropperOptions === undefined ? new CropperOptionsModel({}) : new CropperOptionsModel(this.cropperOptions);\n  }\n\n  /** On input file selected */\n  onChange(fileInput: HTMLInputElement) {\n    const files: File[] = Array.from(fileInput.files);\n    this.handleFiles(files).subscribe();\n  }\n\n  /** Handles input and drag/drop files */\n  handleFiles(files: File[]): Observable<void> {\n    if (!this.isValidMaxFileCount(files)) {\n      return of(null);\n    }\n    const isValidUploadSync = files.every(item => this.validateFileSync(item));\n    const asyncFunctions = files.map(item => this.validateFileAsync(item));\n\n    return combineLatest(...asyncFunctions).pipe(\n      map(res => {\n        const isValidUploadAsync = res.every(result => result === true);\n        if (!isValidUploadSync || !isValidUploadAsync) {\n          return;\n        }\n        files.forEach((file: File, index: number) => {\n          this.handleInputFile(file, index);\n        });\n      })\n    );\n  }\n  /** Validates synchronous validations */\n  validateFileSync(file: File): boolean {\n    if (!file) {\n      return;\n    }\n    if (!this.isValidUploadType(file)) {\n      return;\n    }\n    if (!this.isValidExtension(file, file.name)) {\n      return;\n    }\n    return true;\n  }\n  /** Validates asynchronous validations */\n  validateFileAsync(file: File): Observable<boolean> {\n    if (!this.customValidator) {\n      return of(true);\n    }\n    return this.customValidator(file).pipe(\n      tap(res => {\n        if (!res) {\n          this.validationError.next({\n            file: file,\n            error: FileValidationTypes.customValidator\n          });\n        }\n      })\n    );\n  }\n  /** Handles input and drag&drop files */\n  handleInputFile(file: File, index): void {\n    const type = getFileType(file.type);\n    if (type === 'image' && this.enableCropper) {\n      this.filesForCropper.push(file);\n      if (!this.currentCropperFile) {\n        this.openCropper(file);\n        this.ref.detectChanges();\n      }\n    } else {\n      /** Size is not initially checked on handleInputFiles because of cropper size change */\n      if (this.isValidSize(file, file.size)) {\n        this.pushFile(file);\n      }\n    }\n  }\n  /** Validates if upload type is single so another file cannot be added */\n  isValidUploadType(file): boolean {\n    if (this.uploadType === 'single' && this.files.length > 0) {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.uploadType\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /** Validates max file count */\n  isValidMaxFileCount(files: File[]): boolean {\n    if (\n      !this.fileMaxCount ||\n      this.fileMaxCount >= this.files.length + files.length\n    ) {\n      return true;\n    } else {\n      this.validationError.next({\n        file: null,\n        error: FileValidationTypes.fileMaxCount\n      });\n      return false;\n    }\n  }\n  /** On file dropped */\n  dropped(event: UploadEvent) {\n    this.droppingProcess = new FileDroppingProcessModel(event.files.length);\n\n    for (const droppedFile of event.files) {\n      // Is it a file?\n      if (droppedFile.fileEntry.isFile) {\n        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\n        fileEntry.file((file: File) => {\n          this.droppingProcess.addFileForUpload(file);\n        });\n      } else {\n        // It was a directory (empty directories are added, otherwise only files)\n        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\n        // console.log(droppedFile.relativePath, fileEntry);\n      }\n    }\n    this.handleFilesIfDroppingProcessIsFinished();\n  }\n\n  /** Add file to file list after succesfull validation */\n  pushFile(file: File, fileName = file.name): void {\n    this.files.push({ file: file, fileName: fileName });\n    this.fileAdded.next({ file: file, fileName: fileName });\n  }\n\n  /** Opens cropper for image crop */\n  openCropper(file: File): void {\n    this.currentCropperFile = file;\n  }\n\n  getSafeUrl(file: File): SafeResourceUrl {\n    return this.fileService.createSafeUrl(file);\n  }\n\n  /** Close or cancel cropper */\n  closeCropper(filePreview: FilePreviewModel): void {\n    this.currentCropperFile = undefined;\n    this.cropperIsReady = false;\n    this.cropClosed$.next(filePreview);\n  }\n  /** Removes files from files list */\n  removeFileFromList(file: FilePreviewModel): void {\n    this.files = this.files.filter(f => f !== file);\n  }\n\n  /** Emits event when file upload api returns success  */\n  onUploadSuccess(fileItem: FilePreviewModel): void {\n    this.uploadSuccess.next(fileItem);\n  }\n\n  /** Emits event when file upload api returns failure  */\n  onUploadFail(er: HttpErrorResponse): void {\n    this.uploadFail.next(er);\n  }\n\n  /** Validates file extension */\n  isValidExtension(file: File, fileName: string): boolean {\n      if (!this.fileExtensions) {return true; }\n      const extension = fileName.split('.').pop();\n      const fileExtensions = this.fileExtensions.map(ext => ext.toLowerCase());\n      if (fileExtensions.indexOf(extension.toLowerCase()) === -1) {\n        this.validationError.next({file: file, error: FileValidationTypes.extensions});\n        return false;\n      }\n\n      return true;\n  }\n  /** Validates selected file size and total file size */\n  isValidSize(file: File, size: number): boolean {\n    /** Validating selected file size */\n    const res: number = this.bitsToMb(size.toString());\n    let isValidFileSize: boolean;\n    let isValidTotalFileSize: boolean;\n    if (!this.fileMaxSize || (this.fileMaxSize && res < this.fileMaxSize)) {\n      isValidFileSize = true;\n    } else {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.fileMaxSize\n      });\n    }\n    /** Validating Total Files Size */\n    const totalBits = this.files\n      .map(f => f.file.size)\n      .reduce((acc, curr) => acc + curr, 0);\n    if (\n      !this.totalMaxSize ||\n      (this.totalMaxSize &&\n        this.bitsToMb(totalBits + file.size) < this.totalMaxSize)\n    ) {\n      isValidTotalFileSize = true;\n    } else {\n      this.validationError.next({\n        file: file,\n        error: FileValidationTypes.totalMaxSize\n      });\n    }\n    return !!isValidFileSize && isValidTotalFileSize;\n  }\n  bitsToMb(size): number {\n    return parseFloat(size) / 1048576;\n  }\n  /** when crop button submitted */\n  onCropSubmit(): void {\n    this.blobFallBack(this.croppedImage);\n  }\n  /** After crop submit */\n  blobFallBack(blob: Blob): void {\n    if (!blob) {\n      return;\n    }\n    if (this.isValidSize(<File>blob, blob.size)) {\n      this.pushFile(<File>blob, this.currentCropperFile.name);\n    }\n    this.closeCropper({\n      file: blob as File,\n      fileName: this.currentCropperFile.name\n    });\n  }\n\n  removeFile(fileItem: FilePreviewModel): void {\n    if (this.adapter) {\n      this.adapter.removeFile(fileItem).subscribe(res => {\n        this.onRemoveSuccess(fileItem);\n      });\n    } else {\n      console.warn('no adapter was provided');\n    }\n  }\n  /** Emits event when file remove api returns success  */\n  onRemoveSuccess(fileItem: FilePreviewModel): void {\n    this.removeSuccess.next(fileItem);\n    this.removeFileFromList(fileItem);\n  }\n\n  imageCropped(event: ImageCroppedEvent) {\n    this.croppedImage = base64ToFile(event.base64);\n  }\n\n  imageLoaded() {\n    this.cropperIsReady = true;\n  }\n\n  loadImageFailed() {\n    console.log('Load Image Failed');\n    this.closeCropper({\n      file: this.currentCropperFile,\n      fileName: this.currentCropperFile.name\n    });\n    if (this.cropperOptions.loadImageFailed instanceof Function) {\n      this.cropperOptions.loadImageFailed();\n    }\n  }\n\n  private handleFilesIfDroppingProcessIsFinished() {\n    this.droppingProcess.diminishCounter();\n    if (this.droppingProcess.isProcessingFinished()) {\n      this.handleFiles(this.droppingProcess.getFiles()).subscribe();\n    } else {\n      setTimeout(() => {\n        this.handleFilesIfDroppingProcessIsFinished();\n      }, this.droppingProcess.checkTimeIntervalMS);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'close-icon',\n  templateUrl: './close-icon.component.html',\n  styleUrls: ['./close-icon.component.scss']\n})\nexport class CloseIconComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { FilePickerService } from './../../file-picker.service';\nimport { FilePreviewModel } from './../../file-preview.model';\nimport { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SafeResourceUrl } from '@angular/platform-browser';\nimport { HttpEvent, HttpEventType, HttpErrorResponse } from '@angular/common/http';\nimport { getFileType} from '../../file-upload.utils';\nimport {  Subscription } from 'rxjs';\nimport { FilePickerAdapter } from '../../file-picker.adapter';\nimport { UploaderCaptions } from '../../uploader-captions';\n\n@Component({\n  selector: 'file-preview-item',\n  templateUrl: './file-preview-item.component.html',\n  styleUrls: ['./file-preview-item.component.scss']\n})\nexport class FilePreviewItemComponent implements OnInit {\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadFail = new EventEmitter<HttpErrorResponse>();\n  @Output() public imageClicked = new EventEmitter<FilePreviewModel>();\n  @Input() public fileItem: FilePreviewModel;\n  @Input() adapter: FilePickerAdapter;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() captions: UploaderCaptions;\n  icon = 'checkmark';\n  uploadProgress: number;\n  fileType: string;\n  safeUrl: SafeResourceUrl;\n  uploadError: boolean;\n  uploadSubscription: Subscription;\n  fileId: string;\n  constructor(\n    private fileService: FilePickerService,\n  ) {}\n\n  ngOnInit() {\n  this.uploadFile(this.fileItem);\n    this.fileType = getFileType(this.fileItem.file.type);\n    this.safeUrl = this.getSafeUrl(this.fileItem.file);\n  }\n  getSafeUrl(file: File | Blob): SafeResourceUrl {\n    return this.fileService.createSafeUrl(file);\n  }\n  /** Converts bytes to nice size */\n  niceBytes(x): string {\n    const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let l = 0,\n      n = parseInt(x, 10) || 0;\n    while (n >= 1024 && ++l) {\n      n = n / 1024;\n    }\n    // include a decimal point and a tenths-place digit if presenting\n    // less than ten of KB or greater units\n    return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n  }\n  /** Retry file upload when upload was unsuccessfull */\n  onRetry(): void {\n    this.uploadFile(this.fileItem);\n  }\n  onCheckMarkClick() {\n    this.icon = 'error';\n  }\n  uploadFile(fileItem: FilePreviewModel): void {\n    if (this.adapter) {\n      this.uploadSubscription =\n      this.adapter.uploadFile(fileItem)\n      .subscribe((res: number | string) => {\n        if (typeof res === 'string') {\n          this.onUploadSuccess(res, fileItem);\n          this.uploadProgress = undefined;\n        }\n        if (typeof res === 'number') {\n          this.uploadProgress = res;\n        //  this.handleProgressResponse(<HttpEvent<any>>res, fileItem);\n        }\n      }, (er: HttpErrorResponse) => {\n        this.uploadError = true;\n        this.uploadFail.next(er);\n        this.uploadProgress = undefined;\n  });\n    } else {\n      console.warn('no adapter was provided');\n    }\n  }\n  /** Emits event when file upload api returns success  */\n  onUploadSuccess(id: string, fileItem: FilePreviewModel): void {\n    this.fileId = id;\n    this.fileItem.fileId = id;\n    this.uploadSuccess.next({...fileItem, fileId: id});\n  }\n  handleProgressResponse(event: HttpEvent<any> , fileName) {\n    switch (event.type) {\n      case HttpEventType.Sent:\n        return ;\n\n      case HttpEventType.UploadProgress:\n        // Compute and show the % done:\n        this.uploadProgress = Math.round((100 * event.loaded) / event.total);\n       return;\n\n      case HttpEventType.Response:\n        const body: any = event.body;\n        if (body && body.data) {\n         // this.uploaded.next(res.data.toString());\n        }\n        this.uploadProgress = undefined;\n        return;\n      default:\n        this.uploadProgress = undefined;\n        return `File \"${fileName}\" surprising upload event: ${event.type}.`;\n    }\n  }\n onRemove(fileItem: FilePreviewModel): void {\n  this.uploadUnsubscribe();\n  this.removeFile.next(fileItem);\n }\n /** Cancel upload. Cancels request  */\n uploadUnsubscribe(): void {\n  if (this.uploadSubscription) {\n    this.uploadSubscription.unsubscribe();\n   }\n }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { FilePreviewModel } from '../file-preview.model';\nimport { FilePickerAdapter } from '../file-picker.adapter';\nimport { UploaderCaptions } from '../uploader-captions';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'file-preview-container',\n  templateUrl: './file-preview-container.component.html',\n  styleUrls: ['./file-preview-container.component.scss']\n})\nexport class FilePreviewContainerComponent implements OnInit {\n  @Input() previewFiles: FilePreviewModel[];\n  @Input() itemTemplate: TemplateRef<any>;\n  @Output() public removeFile = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadSuccess = new EventEmitter<FilePreviewModel>();\n  @Output() public uploadFail = new EventEmitter<HttpErrorResponse>();\n  lightboxFile: FilePreviewModel;\n  @Input() adapter: FilePickerAdapter;\n  @Input() captions: UploaderCaptions;\n  constructor() { }\n\n  ngOnInit() {\n  }\n  openLightbox(file: FilePreviewModel) {\n   this.lightboxFile = file;\n  }\n  closeLightbox() {\n    this.lightboxFile = undefined;\n  }\n\n}\n","import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\n\n/**\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\n * properties of the given {@link FileSystemEntry}.\n */\nexport class UploadFile {\n    constructor(\n        public relativePath: string,\n        public fileEntry: FileSystemEntry) {\n    }\n}\n","import { UploadFile } from './upload-file.model';\n\nexport class UploadEvent {\n    constructor(\n        public files: UploadFile[]) {\n    }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  NgZone,\n  OnDestroy,\n  Renderer2\n} from '@angular/core';\nimport { timer, Subscription } from 'rxjs';\n\nimport { UploadFile } from './upload-file.model';\nimport { UploadEvent } from './upload-event.model';\nimport {\n  FileSystemFileEntry,\n  FileSystemEntry,\n  FileSystemDirectoryEntry\n} from './dom.types';\nimport { UploaderCaptions } from '../uploader-captions';\n\n@Component({\n  selector: 'file-drop',\n  templateUrl: './file-drop.component.html',\n  styleUrls: ['./file-drop.component.scss']\n})\nexport class FileComponent implements OnDestroy {\n  @Input()\n  captions: UploaderCaptions;\n  @Input()\n  customstyle: string = null;\n  @Input()\n  disableIf = false;\n\n  @Output()\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<\n    UploadEvent\n  >();\n  @Output()\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\n\n  stack = [];\n  files: UploadFile[] = [];\n  subscription: Subscription;\n  dragoverflag = false;\n\n  globalDisable = false;\n  globalStart: Function;\n  globalEnd: Function;\n\n  numOfActiveReadEntries = 0;\n  constructor(private zone: NgZone, private renderer: Renderer2) {\n    if (!this.customstyle) {\n      this.customstyle = 'drop-zone';\n    }\n    this.globalStart = this.renderer.listen('document', 'dragstart', evt => {\n      this.globalDisable = true;\n    });\n    this.globalEnd = this.renderer.listen('document', 'dragend', evt => {\n      this.globalDisable = false;\n    });\n  }\n  public onDragOver(event: Event): void {\n    if (!this.globalDisable && !this.disableIf) {\n      if (!this.dragoverflag) {\n        this.dragoverflag = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  public onDragLeave(event: Event): void {\n    if (!this.globalDisable && !this.disableIf) {\n      if (this.dragoverflag) {\n        this.dragoverflag = false;\n        this.onFileLeave.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n\n  dropFiles(event: any) {\n    if (!this.globalDisable && !this.disableIf) {\n      this.dragoverflag = false;\n      event.dataTransfer.dropEffect = 'copy';\n      let length;\n      if (event.dataTransfer.items) {\n        length = event.dataTransfer.items.length;\n      } else {\n        length = event.dataTransfer.files.length;\n      }\n\n      for (let i = 0; i < length; i++) {\n        let entry: FileSystemEntry;\n        if (event.dataTransfer.items) {\n          if (event.dataTransfer.items[i].webkitGetAsEntry) {\n            entry = event.dataTransfer.items[i].webkitGetAsEntry();\n          }\n        } else {\n          if (event.dataTransfer.files[i].webkitGetAsEntry) {\n            entry = event.dataTransfer.files[i].webkitGetAsEntry();\n          }\n        }\n        if (!entry) {\n          const file: File = event.dataTransfer.files[i];\n          if (file) {\n            const fakeFileEntry: FileSystemFileEntry = {\n              name: file.name,\n              isDirectory: false,\n              isFile: true,\n              file: (callback: (filea: File) => void): void => {\n                callback(file);\n              }\n            };\n            const toUpload: UploadFile = new UploadFile(\n              fakeFileEntry.name,\n              fakeFileEntry\n            );\n            this.addToQueue(toUpload);\n          }\n        } else {\n          if (entry.isFile) {\n            const toUpload: UploadFile = new UploadFile(entry.name, entry);\n            this.addToQueue(toUpload);\n          } else if (entry.isDirectory) {\n            this.traverseFileTree(entry, entry.name);\n          }\n        }\n      }\n\n      this.preventAndStop(event);\n\n      const timerObservable = timer(200, 200);\n      this.subscription = timerObservable.subscribe(t => {\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n          this.onFileDrop.emit(new UploadEvent(this.files));\n          this.files = [];\n        }\n      });\n    }\n  }\n\n  private traverseFileTree(item: FileSystemEntry, path: string) {\n    if (item.isFile) {\n      const toUpload: UploadFile = new UploadFile(path, item);\n      this.files.push(toUpload);\n      this.zone.run(() => {\n        this.popToStack();\n      });\n    } else {\n      this.pushToStack(path);\n      path = path + '/';\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\n      let entries = [];\n      const thisObj = this;\n\n      const readEntries = function() {\n        thisObj.numOfActiveReadEntries++;\n        dirReader.readEntries(function(res) {\n          if (!res.length) {\n            // add empty folders\n            if (entries.length === 0) {\n              const toUpload: UploadFile = new UploadFile(path, item);\n              thisObj.zone.run(() => {\n                thisObj.addToQueue(toUpload);\n              });\n            } else {\n              for (let i = 0; i < entries.length; i++) {\n                thisObj.zone.run(() => {\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\n                });\n              }\n            }\n            thisObj.zone.run(() => {\n              thisObj.popToStack();\n            });\n          } else {\n            // continue with the reading\n            entries = entries.concat(res);\n            readEntries();\n          }\n          thisObj.numOfActiveReadEntries--;\n        });\n      };\n\n      readEntries();\n    }\n  }\n\n  private addToQueue(item: UploadFile) {\n    this.files.push(item);\n  }\n\n  pushToStack(str) {\n    this.stack.push(str);\n  }\n\n  popToStack() {\n    const value = this.stack.pop();\n  }\n\n  private clearQueue() {\n    this.files = [];\n  }\n\n  private preventAndStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.globalStart();\n    this.globalEnd();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'cloud-icon',\n  templateUrl: './cloud-icon.component.html',\n  styleUrls: ['./cloud-icon.component.scss']\n})\nexport class CloudIconComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {FileComponent} from './file-drop.component';\nimport { CloudIconComponent } from '../icons/cloud-icon/cloud-icon.component';\n\n@NgModule({\n  declarations: [\n    FileComponent,\n    CloudIconComponent\n  ],\n  exports: [FileComponent],\n  imports: [CommonModule],\n  providers: [],\n  bootstrap: [FileComponent],\n})\nexport class FileDropModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FilePreviewModel } from '../../file-preview.model';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'preview-lightbox',\n  templateUrl: './preview-lightbox.component.html',\n  styleUrls: ['./preview-lightbox.component.scss']\n})\nexport class PreviewLightboxComponent implements OnInit {\n  @Input() file: FilePreviewModel;\n  @Output() close = new EventEmitter<void>();\n  loaded: boolean;\n  safeUrl: SafeResourceUrl;\n  constructor(private sanitizer: DomSanitizer) { }\n\n  ngOnInit() {\n    this.getSafeUrl(this.file.file);\n  }\n  getSafeUrl(file: File | Blob): void {\n    const url = window.URL.createObjectURL(file);\n    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  onClose(event): void {\n   this.close.next();\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'refresh-icon',\n  templateUrl: './refresh-icon.component.html',\n  styleUrls: ['./refresh-icon.component.scss']\n})\nexport class RefreshIconComponent implements OnInit {\n   @Output() public retry  = new EventEmitter<void>();\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { CloseIconComponent } from './icons/close-icon/close-icon.component';\nimport { FilePreviewItemComponent } from './file-preview-container/file-preview-item/file-preview-item.component';\nimport { FilePreviewContainerComponent } from './file-preview-container/file-preview-container.component';\nimport { NgModule } from '@angular/core';\nimport { FilePickerComponent } from './file-picker.component';\nimport { CommonModule } from '@angular/common';\nimport { FilePickerService } from './file-picker.service';\nimport { FileDropModule } from './file-drop/file-drop.module';\nimport { PreviewLightboxComponent } from './file-preview-container/preview-lightbox/preview-lightbox.component';\nimport { RefreshIconComponent } from './file-preview-container/file-preview-item/refresh-icon/refresh-icon.component';\nimport { ImageCropperModule } from 'ngx-image-cropper';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FileDropModule,\n    ImageCropperModule\n  ],\n  declarations: [\n    FilePickerComponent,\n    FilePreviewContainerComponent,\n    FilePreviewItemComponent,\n    PreviewLightboxComponent,\n    RefreshIconComponent,\n    CloseIconComponent\n  ],\n  exports: [FilePickerComponent],\n  providers: [FilePickerService]\n})\nexport class FilePickerModule {}\n"]}